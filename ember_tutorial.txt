Ember tutorial from : https://guides.emberjs.com/release/getting-started/quick-start/

npm install -g ember-cli

Create new dir and set up a new Ember application inside of it:
ember new ember-quickstart --lang en

Application will include:

   + A development server.
   + Template compilation.
   + JavaScript and CSS minification.
   + Modern features via Babel.


.hbs -> An HBS file is a template file created by Handlebars, a web template system. 
	It contains a template written in HTML code and embedded with Handlebars expressions.

Creating routes : For now, you can think of routes as being the different pages that make up 
your application.

ember generate route scientists

installing route
  create app/routes/scientists.js
  create app/templates/scientists.hbs
updating router
  add route scientists
installing route-test
  create tests/unit/routes/scientists-test.js

That is Ember telling you that it has created:

    A template to be displayed when the user visits /scientists.
    A Route object that fetches the model used by that template.
    An entry in the application's router (located in app/router.js).
    A unit test for this route.


<h1>People Tracker</h1>
{{outlet}}


what about the {{outlet}}? 

The {{outlet}} in the main app is the content of route beneath. nicly expained:
Let’s say your app displayed lists of books or movies, and the user can click on a title to view details of a specific book or movie. 
Your routes would probably look something like this:

application

    books [list books]
        book [details for a specific book]

    movies [list movies]
        movie [movie details]

The templates for the books & movies routes would be rendered where the {{outlet}} in the application template is located. 
Each of those templates could have very different html, but both lists would be wrapped by the same html in the application template.

Each of those lists could in turn have their own {{outlet}} into which their respective details routes (book & movie) templates would be rendered.

(Or they could replace the lists entirely but that’s another story.)

Have a look here for some more examples. Keep in mind this post is a bit old so there may be some outdated info.


UI component - user interface 

User interface (UI) elements are the parts we use to build apps or websites. They add interactivity to a user interface, 
providing touchpoints for the user as they navigate their way around; 
think buttons, scrollbars, menu items and checkboxes.


ember generate component people-list


Note that we've changed the title from a hard-coded string ("List of Scientists") to {{@title}}. 
The @ indicates that @title is an argument that will be passed into the component, 
which makes it easier to reuse the same component in other parts of the app we are building.

Our component is called <PeopleList>, based on its name on the file system. 
Please note that the letters P and L are capitalized.

A component's name is derived from its file name. We capitalize the first letter and every letter after -, 
then remove the hyphens. This is known as pascal case. 

people-list -> <PeopleList>

----------
ADDING SOME ACTION
create in people-list button

then in the same folder create .js file with the same name: people-list.js
and add file:
import Component from '@glimmer/component';
import { action } from '@ember/object';

export default class PeopleListComponent extends Component {
  @action
  showPerson(person) {
    alert(`The person's name is ${person}!`);
  }
}


<h2>{{@title}}</h2>

<ul>
  {{#each @people as |person|}}
    <li>
      <button type="button" {{on 'click' this.showPerson}}>{{person}}</button>
      <button type="button" {{on 'click' (fn this.showPerson person)}}>{{person}}</button>
    </li>
  {{/each}}
</ul>

if we use {{on 'click' this.showPerson}} we will just concatenate action, to conotate person we need to take fn and person.

--------------------------------
Building For Production

ember build --environment=production

it will craete a dist with assets / index.html and robot

The build command packages up all of the assets that make up your application—JavaScript, 
templates, CSS, web fonts, images, and more.

In this case, we told Ember to build for the production environment via the --environment flag. 
This creates an optimized bundle that's ready to upload to your web host. Once the build finishes,
 you'll find all of the concatenated and minified assets in your application's dist/ directory.

------------------------------
to biuld my app on apache server I will use plugins :
ember install ember-cli-deploy